{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/back/index.js","webpack:///./src/back/server/server.js","webpack:///external \"config\"","webpack:///external \"express\"","webpack:///external \"body-parser\"","webpack:///./src/back/util/log.js","webpack:///external \"winston\"","webpack:///external \"babel-polyfill\"","webpack:///./src/back/routes/front-end.js","webpack:///external \"apollo-server-express\"","webpack:///./src/back/gql/index.js","webpack:///external \"graphql\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_server2","default","app","_express2","log","_log2","use","bodyParser","json","express","static","GqlServer","applyMiddleware","frontEndRouter","req","res","healthy","port","config","listen","info","graphqlPath","require","_winston","combine","format","timestamp","label","customFormat","printf","level","message","createLogger","transports","Console","router","Router","send","_apolloServerExpress","_graphql","schema","GraphQLSchema","query","GraphQLObjectType","fields","hello","type","GraphQLString","description","resolve","ApolloServer"],"mappings":"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","file":"server.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * @file entry point for the server initialization.\n */\n\nrequire('babel-polyfill');\n// eslint-disable-next-line\nimport server from './server/server';\n\n// Start up server:\nserver();\n","/**\n * @file server initialization file.\n */\nimport config from 'config';\nimport express from 'express';\nimport bodyParser from 'body-parser';\n\nimport getLogger from '../util/log';\nimport GqlServer from '../gql/index';\nimport frontEndRouter from '../routes/front-end';\n\nconst app = express();\nconst log = getLogger('server');\n\napp.use(bodyParser.json());\napp.use(express.static('./'));\n\nGqlServer.applyMiddleware({ app });\n\n/**\n * Routers:\n */\napp.use(frontEndRouter);\n\n/**\n * health end-points\n */\napp.get('/health-check', (req, res) => res.json({ healthy: true }));\n\nexport default () => {\n  const port = config.get('server.port');\n\n  app.listen(port, () => {\n    log.info(`Server initialized on port: ${port}`);\n    log.info(`GQL running at: ${GqlServer.graphqlPath}`);\n  });\n};\n","module.exports = require(\"config\");","module.exports = require(\"express\");","module.exports = require(\"body-parser\");","/**\n * @file Logger creation util.\n */\nimport { createLogger, format, transports } from 'winston';\n\nconst {\n  combine,\n  timestamp,\n  label,\n  printf,\n} = format;\n\nconst customFormat = printf((info) => {\n  return `${info.timestamp} [${info.label}] ${info.level}: ${info.message}`;\n});\n\nconst getLogger = (name) => {\n  const logger = createLogger({\n    format: combine(\n      label({ label: name }),\n      timestamp(),\n      customFormat\n    ),\n    transports: [new transports.Console()],\n  });\n\n  return logger;\n};\n\nexport default getLogger;\n\n","module.exports = require(\"winston\");","module.exports = require(\"babel-polyfill\");","/**\n * @file Front end related routes\n */\nimport express from 'express';\n\nconst router = express.Router();\n\nrouter.get('*', (req, res) => {\n  res.send(`\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n        <title>My React App</title>\n    </head>\n    <body>\n        <div id=\"app\"></div>\n        <script type=\"text/javascript\" src=\"dist/reddit.bundle.js\"></script>\n    </body>\n    </html>\n  `);\n});\n\nexport default router;\n","module.exports = require(\"apollo-server-express\");","import { ApolloServer } from 'apollo-server-express';\nimport { GraphQLSchema, GraphQLObjectType, GraphQLString } from 'graphql';\n\n// The GraphQL schema\nconst schema = new GraphQLSchema({\n  query: new GraphQLObjectType({\n    name: 'Query',\n    fields: {\n      hello: {\n        type: GraphQLString,\n        description: 'A simple type for getting started!',\n        resolve: () => 'world',\n      },\n    },\n  }),\n});\n\nexport default new ApolloServer({ schema });\n","module.exports = require(\"graphql\");"],"sourceRoot":""}