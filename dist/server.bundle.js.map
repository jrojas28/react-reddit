{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"graphql\"","webpack:///./src/back/util/db.js","webpack:///external \"config\"","webpack:///external \"express\"","webpack:///./src/back/gql/models/users/types.js","webpack:///./src/back/gql/models/global/types.js","webpack:///./src/back/util/user.js","webpack:///./src/back/index.js","webpack:///external \"babel-polyfill\"","webpack:///./src/back/server/server.js","webpack:///external \"body-parser\"","webpack:///./src/back/util/log.js","webpack:///external \"winston\"","webpack:///./src/back/gql/index.js","webpack:///external \"apollo-server-express\"","webpack:///./src/back/gql/query.js","webpack:///./src/back/gql/models/users/queries.js","webpack:///./src/back/util/gql.js","webpack:///./src/back/gql/mutation.js","webpack:///./src/back/gql/models/users/mutations.js","webpack:///external \"faker\"","webpack:///./src/back/routes/front-end.js","webpack:///./src/back/util/config.js","webpack:///./src/back/util/boot.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Database","users","IDRecords","clear","keys","forEach","add","table","elem","concat","_toConsumableArray","removeById","id","filter","getIdForTable","_graphql","_types","UserType","GraphQLObjectType","description","fields","type","RecordID","GraphQLString","email","username","GraphQLNonNull","CreateUserInputType","GraphQLInputObjectType","password","passwordConfirm","UInt","SliceArgsType","limit","GraphQLInt","defaultValue","offset","GraphQLScalarType","serialize","parseValue","parseLiteral","ast","kind","Kind","INT","parseInt","_db","generateUser","baseData","_extends","faker","findName","internet","userName","generateUserBase","arguments","length","undefined","userBase","push","default","app","_express2","log","_log2","use","bodyParser","json","express","static","GqlServer","applyMiddleware","frontEndRouter","req","res","healthy","_callee","port","regeneratorRuntime","wrap","_context","prev","next","_boot2","config","listen","info","graphqlPath","stop","_winston","combine","format","timestamp","label","customFormat","printf","level","message","createLogger","transports","Console","_apolloServerExpress","schema","GraphQLSchema","query","mutation","ApolloServer","playground","settings","editor.cursorShape","_queries","user","SingleUserQuery","ListUserQuery","_gql","args","resolve","src","_ref","find","GraphQLList","getSliceArgs","_ref2","_ref2$slice","slice","getSlicedList","list","_slice$offset","_slice$limit","resolvedList","_mutations","createUser","CreateUserMutation","_user","input","some","Error","_config","router","Router","send","JSON","stringify","frontEndConfig","baseUrl","graphqlEndpoint"],"mappings":"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","file":"server.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","module.exports = require(\"graphql\");","/**\n * @file Helper to handle generated in-memory database.\n */\n/**\n * The database object. Each key here represents\n * a table\n */\nconst Database = {\n  users: [],\n};\n\n/**\n * Stores the last given ID to the user\n */\nconst IDRecords = {\n  users: 0,\n};\n\n/**\n * Clears all of the database 'tables'.\n */\nexport const clear = () => {\n  const keys = Object.keys(Database);\n  keys.forEach((key) => {\n    Database[key] = [];\n    IDRecords[key] = 0;\n  });\n};\n\n/**\n * Adds an element to the Database object.\n * @param {String} table The database table name in which the element will be added\n * @param {*} elem Element to be added.\n */\nexport const add = (table, elem) => {\n  if (!table || !elem || !Database[table]) {\n    return; // nothing to do. Won't add anything.\n  }\n\n  Database[table] = [\n    ...Database[table],\n    elem,\n  ];\n};\n\n/**\n * Removes an element by ID\n * @param {string} table The database name in which the element will be removed.\n * @param {number} id ID of the element to be removed\n */\nexport const removeById = (table, id) => {\n  if (!table || typeof id === 'undefined' || !Database[table]) {\n    return;\n  }\n\n  Database[table] = Database[table].filter(elem => elem.id !== id);\n};\n\n/**\n * Gets a new, unique, ID for a given table.\n * @param {String} table The database name to which the ID is looked for.\n */\nexport const getIdForTable = (table) => {\n  IDRecords[table] += 1;\n  return IDRecords[table];\n};\n\nexport default Database;\n","module.exports = require(\"config\");","module.exports = require(\"express\");","/**\n * @file User model type definition\n */\nimport {\n  GraphQLObjectType,\n  GraphQLString,\n  GraphQLNonNull,\n  GraphQLInputObjectType,\n} from 'graphql';\nimport { RecordID } from '../global/types';\n\nexport const UserType = new GraphQLObjectType({\n  name: 'User',\n  description: 'Single user item',\n  fields: {\n    id: {\n      type: RecordID,\n    },\n    name: {\n      type: GraphQLString,\n    },\n    email: {\n      type: GraphQLString,\n    },\n    username: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n  },\n});\n\nexport const CreateUserInputType = new GraphQLInputObjectType({\n  name: 'CreateUserInputType',\n  description: 'Input needed to create an User record',\n  fields: {\n    username: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n    email: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n    password: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n    passwordConfirm: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n  },\n});\n\nexport default UserType;\n","/**\n * @file Global types.\n */\nimport {\n  GraphQLInputObjectType,\n  GraphQLInt,\n  GraphQLScalarType,\n  Kind,\n  GraphQLNonNull,\n} from 'graphql';\n\n/**\n * Slice arguments type. Serves the purpose of pagination\n * across any array/collection type.\n */\nexport const SliceArgsType = new GraphQLInputObjectType({\n  name: 'SliceArgs',\n  description: 'Slice arguments',\n  fields: {\n    limit: {\n      type: GraphQLInt,\n      defaultValue: 25,\n    },\n    offset: {\n      type: GraphQLInt,\n      defaultValue: 0,\n    },\n  },\n});\n\n/**\n * Unsigned int GQL type.\n */\nexport const UInt = new GraphQLScalarType({\n  name: 'UInt',\n  serialize: value => value && value >= 0 ? value : null,\n  parseValue: value => value && value >= 0 ? value : null,\n  parseLiteral: (ast) => {\n    if (ast.kind === Kind.INT) {\n      return parseInt(ast.value, 10) >= 0 || null;\n    }\n    return null;\n  },\n});\n\n/**\n * Record ID items.\n */\nexport const RecordID = new GraphQLNonNull(UInt);\n\n","/**\n * @file User util\n */\nimport faker from 'faker';\nimport { getIdForTable } from './db';\n\n/**\n * Generates a user with its attributes using faker.\n * BaseData can be provided for custom functionality.\n * @param {Object} baseData information to replace the generated one\n */\nexport const generateUser = (baseData) => {\n  return {\n    name: faker.name.findName(),\n    email: faker.internet.email(),\n    username: faker.internet.userName(),\n    ...baseData,\n    // Make sure ID is not overwritten\n    id: getIdForTable('users'),\n  };\n};\n\n/**\n * Returns a list of users with IDs from 1 to limit\n * @param {int} limit Number of users to generate (defaults to 100)\n */\nexport const generateUserBase = (limit = 100) => {\n  const userBase = [];\n\n  for (let i = 1; i <= limit; i += 1) {\n    userBase.push(generateUser());\n  }\n\n  return userBase;\n};\n","/**\n * @file entry point for the server initialization.\n */\n\nimport 'babel-polyfill';\nimport server from './server/server';\n\n// Start up server:\nserver();\n","module.exports = require(\"babel-polyfill\");","/**\n * @file server initialization file.\n */\nimport config from 'config';\nimport express from 'express';\nimport bodyParser from 'body-parser';\n\nimport getLogger from '../util/log';\nimport GqlServer from '../gql/index';\nimport frontEndRouter from '../routes/front-end';\nimport boot from '../util/boot';\n\nconst app = express();\nconst log = getLogger('server');\n\napp.use(bodyParser.json());\napp.use(express.static('./'));\n\nGqlServer.applyMiddleware({ app });\n\n/**\n * Routers:\n */\napp.use(frontEndRouter);\n\n/**\n * health end-points\n */\napp.get('/health-check', (req, res) => res.json({ healthy: true }));\n\nexport default async () => {\n  boot();\n  const port = config.get('server.port');\n\n  app.listen(port, () => {\n    log.info(`Server initialized on port: ${port}`);\n    log.info(`GQL running at: ${GqlServer.graphqlPath}`);\n  });\n};\n","module.exports = require(\"body-parser\");","/**\n * @file Logger creation util.\n */\nimport { createLogger, format, transports } from 'winston';\n\nconst {\n  combine,\n  timestamp,\n  label,\n  printf,\n} = format;\n\nconst customFormat = printf((info) => {\n  return `${info.timestamp} [${info.label}] ${info.level}: ${info.message}`;\n});\n\n/**\n * Returns a logger to be used on the back-end.\n * @param {String} name Name of the logger\n */\nconst getLogger = (name) => {\n  const logger = createLogger({\n    format: combine(\n      label({ label: name }),\n      timestamp(),\n      customFormat\n    ),\n    transports: [new transports.Console()],\n  });\n\n  return logger;\n};\n\nexport default getLogger;\n\n","module.exports = require(\"winston\");","import { ApolloServer } from 'apollo-server-express';\nimport { GraphQLSchema } from 'graphql';\nimport query from './query';\nimport mutation from './mutation';\n\n// The GraphQL schema\nconst schema = new GraphQLSchema({\n  query,\n  mutation,\n});\n\nexport default new ApolloServer({\n  schema,\n  playground: {\n    settings: {\n      'editor.cursorShape': 'line',\n    },\n  },\n});\n","module.exports = require(\"apollo-server-express\");","/**\n * @file Query type definitions\n */\nimport { GraphQLObjectType } from 'graphql';\nimport { SingleUserQuery, ListUserQuery } from './models/users/queries';\n\nconst query = new GraphQLObjectType({\n  name: 'Query',\n  fields: {\n    user: SingleUserQuery,\n    users: ListUserQuery,\n  },\n});\n\nexport default query;\n","/**\n * @file Queries regarding user\n */\nimport { GraphQLNonNull, GraphQLInt, GraphQLList } from 'graphql';\n\nimport { UserType } from './types';\nimport Database from '../../../util/db';\nimport { getSliceArgs, getSlicedList } from '../../../util/gql';\n\n/**\n * Query to get a single user.\n */\nexport const SingleUserQuery = {\n  name: 'User',\n  type: UserType,\n  args: {\n    id: {\n      description: 'ID of the user to look for',\n      type: new GraphQLNonNull(GraphQLInt),\n    },\n  },\n  resolve: (src, {\n    id,\n  }) => {\n    return Database.users.find(user => user.id === id);\n  },\n};\n\n/**\n * Query to get the list of users out of the database.\n */\nexport const ListUserQuery = {\n  name: 'Users',\n  type: new GraphQLList(UserType),\n  args: {\n    ...getSliceArgs(),\n  },\n  resolve: (src, {\n    slice = {},\n  }) => {\n    return getSlicedList(Database.users, slice);\n  },\n};\n","/**\n * @file GQL helper methods\n */\nimport { SliceArgsType } from '../gql/models/global/types';\n\n/**\n * Returns the sliced arguments to be used\n * on GQL type definitions.\n */\nexport const getSliceArgs = () => {\n  return {\n    slice: {\n      description: 'Slice arguments for lists',\n      type: SliceArgsType,\n    },\n  };\n};\n\n/**\n * Given a list, slices it and returns it based on\n * sliceArgs.\n * @param {Array} list List to be sliced\n * @param {Object} slice Parameters for slicing, expecting limit & offset.\n */\nexport const getSlicedList = (list, slice) => {\n  if (!slice) {\n    return [...list];\n  }\n\n  const {\n    offset = 0,\n    limit = 25,\n  } = slice;\n\n  let resolvedList = [...list];\n\n  if (offset) {\n    resolvedList = resolvedList.slice(offset);\n  }\n\n  if (limit) {\n    resolvedList = resolvedList.slice(0, limit);\n  }\n\n  return resolvedList;\n};\n","/**\n * @file Mutation type definitions\n */\nimport { GraphQLObjectType } from 'graphql';\nimport { CreateUserMutation } from './models/users/mutations';\n\nconst mutation = new GraphQLObjectType({\n  name: 'Mutation',\n  fields: {\n    createUser: CreateUserMutation,\n  },\n});\n\nexport default mutation;\n","\n/**\n * @file Mutations related to the User model.\n */\nimport { UserType, CreateUserInputType } from './types';\nimport Database, { add } from '../../../util/db';\nimport { generateUser } from '../../../util/user';\n\n/**\n * Mutation that enables to create a new user\n */\nexport const CreateUserMutation = {\n  name: 'CreateUser',\n  type: UserType,\n  args: {\n    input: {\n      type: CreateUserInputType,\n    },\n  },\n  resolve: (src, {\n    input,\n  }) => {\n    if (Database.users.some(user => user.username === input.username)) {\n      throw new Error('username is already taken');\n    }\n\n    if (Database.users.some(user => user.email === input.email)) {\n      throw new Error('email is already taken');\n    }\n\n    if (input.password !== input.passwordConfirm) {\n      throw new Error('passwords do not match');\n    }\n\n    const user = generateUser(input);\n    add('users', user);\n\n    return user;\n  },\n};\n\n","module.exports = require(\"faker\");","/**\n * @file Front end related routes\n */\nimport express from 'express';\nimport { frontEndConfig } from '../util/config';\n\nconst router = express.Router();\n\nrouter.get('*', (req, res) => {\n  res.send(`\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n        <title>React Reddit</title>\n        <script type=\"text/javascript\">\n          window.__CONFIG__ = ${JSON.stringify(frontEndConfig())}\n        </script>\n    </head>\n    <body>\n        <div id=\"app\"></div>\n        <script type=\"text/javascript\" src=\"dist/reddit.bundle.js\"></script>\n    </body>\n    </html>\n  `);\n});\n\nexport default router;\n","/**\n * @file Configuration helper related methods.\n */\nimport config from 'config';\n\nexport const frontEndConfig = () => {\n  const baseUrl = config.get('baseUrl');\n\n  return {\n    baseUrl,\n    graphqlEndpoint: `${baseUrl}graphql`,\n  };\n};\n","/**\n * @file Boot file for the DB.\n */\nimport { generateUserBase } from './user';\nimport Database from './db';\n\n/**\n * Initializes some data in the Database\n */\nconst bootDB = () => {\n  Database.users = generateUserBase();\n};\n\nexport default () => {\n  bootDB();\n};\n"],"sourceRoot":""}