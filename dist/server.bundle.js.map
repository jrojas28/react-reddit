{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"graphql\"","webpack:///external \"express\"","webpack:///./src/back/gql/models/global/types.js","webpack:///./src/back/index.js","webpack:///external \"babel-polyfill\"","webpack:///./src/back/server/server.js","webpack:///external \"config\"","webpack:///external \"body-parser\"","webpack:///./src/back/util/log.js","webpack:///external \"winston\"","webpack:///./src/back/gql/index.js","webpack:///external \"apollo-server-express\"","webpack:///./src/back/gql/query.js","webpack:///./src/back/gql/models/users/queries.js","webpack:///./src/back/gql/models/users/types.js","webpack:///./src/back/util/db.js","webpack:///./src/back/util/user.js","webpack:///external \"faker\"","webpack:///./src/back/util/gql.js","webpack:///./src/back/routes/front-end.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","_graphql","UInt","SliceArgsType","GraphQLInputObjectType","description","fields","limit","type","GraphQLInt","defaultValue","offset","GraphQLScalarType","serialize","parseValue","parseLiteral","ast","kind","Kind","INT","parseInt","RecordID","GraphQLNonNull","default","app","_express2","log","_log2","use","bodyParser","json","express","static","GqlServer","applyMiddleware","frontEndRouter","req","res","healthy","_callee","port","regeneratorRuntime","wrap","_context","prev","next","config","listen","info","graphqlPath","stop","undefined","_winston","combine","format","timestamp","label","customFormat","printf","level","message","createLogger","transports","Console","_apolloServerExpress","schema","GraphQLSchema","query","ApolloServer","playground","settings","editor.cursorShape","_queries","GraphQLObjectType","user","SingleUserQuery","users","ListUserQuery","_types","_gql","UserType","args","id","resolve","src","_ref","Database","find","GraphQLList","getSliceArgs","_ref2","_ref2$slice","slice","getSlicedList","GraphQLString","email","username","generateUserBase","clear","keys","forEach","add","elem","concat","_toConsumableArray","removeById","filter","generateUser","baseData","_extends","faker","random","uuid","findName","internet","userName","arguments","length","userBase","push","list","_slice$limit","resolvedList","router","Router","send"],"mappings":"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","file":"server.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"graphql\");","module.exports = require(\"express\");","/**\n * @file Global types.\n */\nimport {\n  GraphQLInputObjectType,\n  GraphQLInt,\n  GraphQLScalarType,\n  Kind,\n  GraphQLNonNull,\n} from 'graphql';\n\n/**\n * Slice arguments type. Serves the purpose of pagination\n * across any array/collection type.\n */\nexport const SliceArgsType = new GraphQLInputObjectType({\n  name: 'SliceArgs',\n  description: 'Slice arguments',\n  fields: {\n    limit: {\n      type: GraphQLInt,\n      defaultValue: 25,\n    },\n    offset: {\n      type: GraphQLInt,\n      defaultValue: 0,\n    },\n  },\n});\n\n/**\n * Unsigned int GQL type.\n */\nexport const UInt = new GraphQLScalarType({\n  name: 'UInt',\n  serialize: value => value && value >= 0 ? value : null,\n  parseValue: value => value && value >= 0 ? value : null,\n  parseLiteral: (ast) => {\n    if (ast.kind === Kind.INT) {\n      return parseInt(ast.value, 10) >= 0 || null;\n    }\n    return null;\n  },\n});\n\n/**\n * Record ID items.\n */\nexport const RecordID = new GraphQLNonNull(UInt);\n\n","/**\n * @file entry point for the server initialization.\n */\n\nimport 'babel-polyfill';\nimport server from './server/server';\n\n// Start up server:\nserver();\n","module.exports = require(\"babel-polyfill\");","/**\n * @file server initialization file.\n */\nimport config from 'config';\nimport express from 'express';\nimport bodyParser from 'body-parser';\n\nimport getLogger from '../util/log';\nimport GqlServer from '../gql/index';\nimport frontEndRouter from '../routes/front-end';\n\nconst app = express();\nconst log = getLogger('server');\n\napp.use(bodyParser.json());\napp.use(express.static('./'));\n\nGqlServer.applyMiddleware({ app });\n\n/**\n * Routers:\n */\napp.use(frontEndRouter);\n\n/**\n * health end-points\n */\napp.get('/health-check', (req, res) => res.json({ healthy: true }));\n\nexport default async () => {\n  const port = config.get('server.port');\n\n  app.listen(port, () => {\n    log.info(`Server initialized on port: ${port}`);\n    log.info(`GQL running at: ${GqlServer.graphqlPath}`);\n  });\n};\n","module.exports = require(\"config\");","module.exports = require(\"body-parser\");","/**\n * @file Logger creation util.\n */\nimport { createLogger, format, transports } from 'winston';\n\nconst {\n  combine,\n  timestamp,\n  label,\n  printf,\n} = format;\n\nconst customFormat = printf((info) => {\n  return `${info.timestamp} [${info.label}] ${info.level}: ${info.message}`;\n});\n\n/**\n * Returns a logger to be used on the back-end.\n * @param {String} name Name of the logger\n */\nconst getLogger = (name) => {\n  const logger = createLogger({\n    format: combine(\n      label({ label: name }),\n      timestamp(),\n      customFormat\n    ),\n    transports: [new transports.Console()],\n  });\n\n  return logger;\n};\n\nexport default getLogger;\n\n","module.exports = require(\"winston\");","import { ApolloServer } from 'apollo-server-express';\nimport { GraphQLSchema } from 'graphql';\nimport query from './query';\n\n// The GraphQL schema\nconst schema = new GraphQLSchema({\n  query,\n});\n\nexport default new ApolloServer({\n  schema,\n  playground: {\n    settings: {\n      'editor.cursorShape': 'line',\n    },\n  },\n});\n","module.exports = require(\"apollo-server-express\");","/**\n * @file Query type definitions\n */\nimport { GraphQLObjectType } from 'graphql';\nimport { SingleUserQuery, ListUserQuery } from './models/users/queries';\n\nconst query = new GraphQLObjectType({\n  name: 'Query',\n  fields: {\n    user: SingleUserQuery,\n    users: ListUserQuery,\n  },\n});\n\nexport default query;\n","/**\n * @file Queries regarding user\n */\nimport { GraphQLNonNull, GraphQLInt, GraphQLList } from 'graphql';\n\nimport { UserType } from './types';\nimport Database from '../../../util/db';\nimport { getSliceArgs, getSlicedList } from '../../../util/gql';\n\nexport const SingleUserQuery = {\n  name: 'User',\n  type: UserType,\n  args: {\n    id: {\n      description: 'ID of the user to look for',\n      type: new GraphQLNonNull(GraphQLInt),\n    },\n  },\n  resolve: (src, {\n    id,\n  }) => {\n    return Database.users.find(user => user.id === id);\n  },\n};\n\nexport const ListUserQuery = {\n  name: 'Users',\n  type: new GraphQLList(UserType),\n  args: {\n    ...getSliceArgs(),\n  },\n  resolve: (src, {\n    slice = {},\n  }) => {\n    return getSlicedList(Database.users, slice);\n  },\n};\n","/**\n * @file User model type definition\n */\nimport { GraphQLObjectType, GraphQLString, GraphQLNonNull } from 'graphql';\nimport { RecordID } from '../global/types';\n\nexport const UserType = new GraphQLObjectType({\n  name: 'User',\n  description: 'Single user item',\n  fields: {\n    id: {\n      type: RecordID,\n    },\n    name: {\n      type: GraphQLString,\n    },\n    email: {\n      type: GraphQLString,\n    },\n    username: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n  },\n});\n\nexport default UserType;\n","/**\n * @file Helper to handle generated data as constants.\n */\nimport { generateUserBase } from './user';\n\nconst Database = {\n  users: generateUserBase(),\n};\n\n/**\n * Clears all of the database 'tables'.\n */\nexport const clear = () => {\n  const keys = Object.keys(Database);\n  keys.forEach((key) => {\n    Database[key] = [];\n  });\n};\n\n/**\n * Adds an element to the Database object.\n * @param {String} key The database name in which the element will be added\n * @param {*} elem Element to be added.\n */\nexport const add = (key, elem) => {\n  if (!key || !elem || !Database[key]) {\n    return; // nothing to do. Won't add anything.\n  }\n\n  Database[key] = [\n    ...Database[key],\n    elem,\n  ];\n};\n\n/**\n * Removes an element by ID\n * @param {string} key The database name in which the element will be removed.\n * @param {number} id ID of the element to be removed\n */\nexport const removeById = (key, id) => {\n  if (!key || typeof id === 'undefined' || !Database[key]) {\n    return;\n  }\n\n  Database[key] = Database[key].filter(elem => elem.id !== id);\n};\n\nexport default Database;\n","/**\n * @file User util\n */\nimport faker from 'faker';\n\n/**\n * Generates a user with its attributes using faker.\n * BaseData can be provided for custom functionality.\n * @param {Object} baseData information to replace the generated one\n */\nexport const generateUser = (baseData) => {\n  return {\n    id: faker.random.uuid(),\n    name: faker.name.findName(),\n    email: faker.internet.email(),\n    username: faker.internet.userName(),\n    ...baseData,\n  };\n};\n\n/**\n * Returns a list of users with IDs from 1 to limit\n * @param {int} limit Number of users to generate (defaults to 100)\n */\nexport const generateUserBase = (limit = 100) => {\n  const userBase = [];\n\n  for (let i = 1; i <= limit; i += 1) {\n    userBase.push(generateUser({ id: i }));\n  }\n\n  return userBase;\n};\n","module.exports = require(\"faker\");","/**\n * @file GQL helper methods\n */\nimport { SliceArgsType } from '../gql/models/global/types';\n\n/**\n * Returns the sliced arguments to be used\n * on GQL type definitions.\n */\nexport const getSliceArgs = () => {\n  return {\n    slice: {\n      description: 'Slice arguments for lists',\n      type: SliceArgsType,\n    },\n  };\n};\n\n/**\n * Given a list, slices it and returns it based on\n * sliceArgs.\n * @param {Array} list List to be sliced\n * @param {Object} slice Parameters for slicing, expecting limit & offset.\n */\nexport const getSlicedList = (list, slice = {}) => {\n  const {\n    offset,\n    limit = 25,\n  } = slice;\n\n  let resolvedList = [...list];\n\n  if (offset) {\n    resolvedList = resolvedList.slice(offset);\n  }\n\n  if (limit) {\n    resolvedList = resolvedList.slice(0, limit);\n  }\n\n  return resolvedList;\n};\n","/**\n * @file Front end related routes\n */\nimport express from 'express';\n\nconst router = express.Router();\n\nrouter.get('*', (req, res) => {\n  res.send(`\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n        <title>My React App</title>\n    </head>\n    <body>\n        <div id=\"app\"></div>\n        <script type=\"text/javascript\" src=\"dist/reddit.bundle.js\"></script>\n    </body>\n    </html>\n  `);\n});\n\nexport default router;\n"],"sourceRoot":""}